
1.在数字方面，PHP只分整形和浮点型，如果想对小数点后200位以后的数字有精确的需求，必须使用BCMath和GMP库。
2. range()还可以获得字符序列
3.注意php数组的使用时内存状况，要注意自己手动释放，在跑脚本的时候需要利用ini_memory();
4.注意rand()和mt_rand()的区别,mt_rand()基于素数更难以预测而且速度比rand()快
5.在做数学计算的时候log()和log10()以10为底的函数,都是针对大于0的数字设计的，如果传入不当数字(小于等于0的数会返回NAN)
6.对于exp()和pow()结果超出允许的最大数，PHP会返回INF无穷大，如果结果错误，则PHP会返回NAN(不是一个数字).
7.格式化数字平时也很常用，省的自己分割，number_format();
  $number = 1234.56 ;
  list($int,$dec) = explode('.',$number);
  print number_format($number,strlen($dec));
  如果在不知道小数点位数的情况下，又不想数字摄入到最接近的整数，就可以像一上面代码这么做。
8.bcadd()等bcmatch函数,若使用gmp ,$ts = gmp_add(),最后要使用gmp_strval($ts)进行转换，这两个数可以最快的对数字进行升幂，大阶乘，找出最大公因数等操作
//升幂
gmp_pow(2,10);
//大阶乘
gmp_fact(20);
//GCD
gmp_gcd(123,456) //3
BCMath是和PHP绑定的。GMP库没有和PHP绑定。
可以通过检查function_defined('bcadd') 和 function_defined('gmp_init')
还有一个高精度的数学运算的选择是big_int库
//使用BIG_INT库实现加法
$two = bi_from_str("2");
$four = bi_add($two,$two);
print bi_to_str($four);

$factorial = bi_fact(20);
这个库比BCMath要快，而且几乎和GMP库一样强大，不过GMP库基于LGPL许可，而BIG_INT库则是基于BSD许可的。

9.不同进制之间的转换，base_convert($origal,$from,$to); //from 多少进制  to 多少进制
使用printf('#%02X%02X%02X',0,102,204); //#0066CC






