=============================================================================
Mysql服务器调优
通过脚本,刷新观察status 
【
是否周期性故障或波动 
一般由访问高峰或缓存崩溃引起 
加缓存并更改缓存失效策略 
使失效时间分散
或者夜间定时失效
】
=============================================================================
如果 
仍有不规则出现的延迟或者卡顿现象
show processlist或者开启慢查询
获取有问题的sql语句
profiling分析语句以及explain分析语句
=============================================================================
【
如果语句等待时间场(IO)
调优服务器参数(如缓冲区,线程数)
】
【
如果语句执行时间长
1.表关联多(表的设计有缺陷)
2.索引没有优化
3.语句没有优化
】


=============================================================================
awk的简单使用分析mysql数据
[root@localhost a]# awk '{printf("%s\n",$0)}' score.txt
aaa 1 2 3
bbb 4 5 6
ccc 7 8 9 

[root@localhost a]# mysqladmin -uroot -p123456 ext | awk '/Queries/{printf("%d\n",$4)}/Threads_connected/{printf("%d\n",$4)}/Threads_running/{printf("%d\n",$4)}'
266
2
1
[root@localhost a]# mysqladmin -uroot -p123456 ext | awk '/Queries/{printf("%d\n",$4)}/Threads_connected/{printf("%d\n",$4)}/Threads_running/{printf("%d\n",$4)}'
268
2
1
[root@localhost a]# mysqladmin -uroot -p123456 ext | awk '/Queries/{q=$4}/Threads_connected/{c=$5}/Threads_running/{r=$5}END{printf("%d %d %d\n",q,c,r)}'
270 0 0

一个正则表达式,一个处理方式,最后在输出变量.


====================================================================
启动memcache
[root@localhost memcached]# ./bin/memcached -m 512 -p 11211 -u nobody -d
[root@localhost memcached]# ps aux |grep mem
nobody   104400  0.0  0.0 315944  1948 ?        Ssl  10:15   0:00 ./bin/memcached -m 64 -p 11211 -u nobody -vvv -d
root     127161  0.0  0.0 112660   960 pts/3    R+   22:08   0:00 grep --color=auto mem

做观察服务器压力的测试
模拟随机选取3万条热数据
取出后存储在memcached
生命周期为5分钟
同时调整ab参数,尽量在1分钟内完成缓存创建

$id = 1300000 + mt_rand(0,300000);
$sql= 'select id,name,brief,addres from lx_com where id='.$id;

$mem = new memcache();
$mem->pconnect('localhost');

if(($com = $mem->get($sql))===false){

 $conn = mysql_connect('127.0.0.1','root','123456');
 mysql_query('use big_data',$conn);
 mysql_query('set names utf8',$conn);
 
 $rs = mysql_query($sql,$conn);
 $com = mysql_fetch_assoc($rs);
 $mem->add($sql,$com,false,100);

}
print_r($com)



apache下有ab测试
[root@localhost html]# ab -c 50 -n 20000 http://192.168.1.211/index.php
This is ApacheBench, Version 2.3 <$Revision: 1430300 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 192.168.1.211 (be patient)
Completed 2000 requests
Completed 4000 requests
Completed 6000 requests
Completed 8000 requests
Completed 10000 requests
Completed 12000 requests
Completed 14000 requests
Completed 16000 requests
Completed 18000 requests
Completed 20000 requests
Finished 20000 requests


Server Software:        nginx/1.0.15
Server Hostname:        192.168.1.211
Server Port:            80

Document Path:          /index.php
Document Length:        57072 bytes

Concurrency Level:      50
Time taken for tests:   19.407 seconds
Complete requests:      20000
Failed requests:        1947
   (Connect: 0, Receive: 0, Length: 1947, Exceptions: 0)
Write errors:           0
Total transferred:      1144397819 bytes
HTML transferred:       1141437819 bytes
Requests per second:    1030.54 [#/sec] (mean)
Time per request:       48.518 [ms] (mean)
Time per request:       0.970 [ms] (mean, across all concurrent requests)
Transfer rate:          57585.51 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.2      0       2
Processing:    24   48   9.2     45     158
Waiting:       22   48   9.2     45     157
Total:         25   48   9.2     46     159

Percentage of the requests served within a certain time (ms)
  50%     46
  66%     47
  75%     49
  80%     51
  90%     61
  95%     64
  98%     70
  99%     77
 100%    159 (longest request)

==========================
>覆盖,>>追加
==========================
写一个shell每秒统计mysql的状态,并输出到status.txt
tj.sh
#!/bin/bash
while true
do

mysqladmin -uroot -p123456 ext | awk '/Queries/{q=$4}/Threads_connected/{c=$5}/Threads_running/{r=$5}END{printf("%d %d %d\n",q,c,r)}' >> status.txt

sleep1


完成后sh tj.sh

这时候用ab压力测试疯狂的请求测试页面,测试页面疯狂的请求mysql,由于代码里设置了memcache的存储,当memcache里有数据的时候不走mysql
用ab查看每秒链接请求的次数,算出周期,用来设定缓存周期.
用执行tj.sh得到的status.txt查看 请求mysql的状态
对得到的 status.txt数据进行
awk '{q=$1-last;last=$1}{print("%d %d %d\n",q,$2,$3)}' status.txt
得到每秒增加的请求数量
将数据导入Excel生成折线图或者其他有利于分析峰值的图表,找出最大峰值的地方进行分析,改进!


=============================================================================================================================
show processlist的应用

[root@localhost html]# mysql -uroot -p123456 -e 'show processlist \G'
*************************** 1. row ***************************
      Id: 58
    User: root
    Host: localhost
      db: lush_info
 Command: Sleep
    Time: 3
   State: 
    Info: NULL
Progress: 0.000
*************************** 2. row ***************************
      Id: 69
    User: root
    Host: localhost
      db: NULL
 Command: Query
    Time: 0
   State: NULL
    Info: show processlist
Progress: 0.000



=================================================================================================
设置一个统计processlist的脚本
每秒执行10次
#!/bin/bash
while true
do 
mysql -uroot -p123456  -e 'show processlist \G' | grep State|uniq -c|sort -rn >>proce.txt
usleep 100000
done

对得到的proce.txt more proce.txt | sort|uniq -c |sort -rn

converting HEAP to MyISAM 查询结果太大时,把结果放在磁盘
create tmp table 创建临时表(如group时存储中间结果)
Copying to tmp table on disk 把内存临时表复制到磁盘
locked 被其他锁锁住
logging slow query 记录慢查询


查询和size有关的全局变量
MariaDB [lush_info]> show variables like '%size%';
找到了tmp_table_size
set global tmp_table_size=1024;
set session tmp_table_size =1024;


开启记录
set profiling = 1;或者set profiling=on;
show profiles;
列出最近的每一次查询
得到编号
MariaDB [lush_info]> show profiles;
+----------+------------+--------------------+
| Query_ID | Duration   | Query              |
+----------+------------+--------------------+
|        1 | 0.08891241 | set names urf8     |
|        2 | 0.00011046 | select * from user |
|        3 | 0.00010988 | select * from user |
|        4 | 0.00003976 | set names utf8     |
|        5 | 0.00015125 | select * from user |
+----------+------------+--------------------+
5 rows in set (0.00 sec)
利用编号
显示最近详细查询的分析
MariaDB [lush_info]> show profile for query 2;
+----------------------+----------+
| Status               | Duration |
+----------------------+----------+
| starting             | 0.000026 |
| checking permissions | 0.000003 |
| Opening tables       | 0.000009 |
| After opening tables | 0.000002 |
| System lock          | 0.000003 |
| Table lock           | 0.000001 |
| After table lock     | 0.000003 |
| init                 | 0.000009 |
| optimizing           | 0.000004 |
| statistics           | 0.000007 |
| preparing            | 0.000005 |
| executing            | 0.000001 |
| Sending data         | 0.000024 |
| end                  | 0.000002 |
| query end            | 0.000002 |
| closing tables       | 0.000003 |
| freeing items        | 0.000002 |
| updating status      | 0.000004 |
| cleaning up          | 0.000001 |
+----------------------+----------+
19 rows in set (0.02 sec)








使用sysbench进行压力测试（事务压力测试）
观察低效状态,然后去解决












