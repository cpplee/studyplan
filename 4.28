事物

innodb 和 dbd支持

开启事物 start transaction;


commit/rollback


设置事物级别 
set session transaction isolation level read uncommitted; 脏读模式(能够读没有提交的数据)


set session transaction isolation level read committed; 这种模式一方commit另一方就可以读取到,但是有可能这一方并没有commit


set session transaction isolation level  repeateble read;

















配置nginx=====================================


nginx信号控制

kill INT PID

px aux | grep nginx 
kill -INT XXXX




刚才服务器出了问题，排查了下 不知道为三面 php-fpm nginx 关闭了，apache自动开启
netstat -anp  看到httpd在80端口
杀掉他 systemctl stop httpd.service 

开启php-fpm 和nginx
./sbin/nginx
service php-fpm start
解决



使用信号量 HUP
当修改配置文件平滑重启(优雅[doge])

nginx下 修改文件名无效,因为物理存储上使用的是inode.
如果想把日志写到新的日志文件中,需要使用信号量

kill -USR1 主进程号master


./sbin/nginx -s reload
./sbin/nginx -s stop

./sbin/nginx -t 检查配置文件




Nginx配置段

// 全局区
worker_processes 1; // 有1个工作的子进程,可以自行修改,但太大无益,因为要争夺CPU,一般设置为 CPU数*核数

Event {
// 一般是配置nginx连接的特性
// 如1个word能同时允许多少连接
 worker_connections  1024; // 这是指 一个子进程最大允许连1024个连接
}

http {  //这是配置http服务器的主要段
     Server1 { // 这是虚拟主机段
       
            Location {  //定位,把特殊的路径或文件再次定位 ,如image目录单独处理
            }             /// 如.php单独处理

     }

     Server2 {
     }
}


例子1: 基于域名的虚拟主机

    server {
        listen 80;  #监听端口
        server_name a.com; #监听域名

        location / {
                root /var/www/a.com;   #根目录定位
                index index.html;
        }
    }

例子2: 基于端口的虚拟主机配置

    server {
        listen 8080;
        server_name 192.168.1.204;

        location / {
                root /var/www/html8080;
                index index.html;
        }
    }
日志管理


我们观察nginx的server段,可以看到如下类似信息
 #access_log  logs/host.access.log  main;
这说明 该server, 它的访问日志的文件是  logs/host.access.log ,
使用的格式”main”格式.
除了main格式,你可以自定义其他格式.

main格式是什么?
log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

main格式是我们定义好一种日志的格式,并起个名字,便于引用.
以上面的例子, main类型的日志,记录的 remote_addr.... http_x_forwarded_for等选项.


1: 日志格式 是指记录哪些选项
默认的日志格式: main
     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

如默认的main日志格式,记录这么几项
远程IP- 远程用户/用户时间 请求方法(如GET/POST) 请求体body长度 referer来源信息
http-user-agent用户代理/蜘蛛 ,被转发的请求的原始IP

http_x_forwarded_for:在经过代理时,代理把你的本来IP加在此头信息中,传输你的原始IP



2: 声明一个独特的log_format并命名

                      log_format  mylog '$remote_addr- "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
在下面的server/location,我们就可以引用 mylog

在server段中,这样来声明
Nginx允许针对不同的server做不同的Log ,(有的web服务器不支持,如lighttp)

access_log logs/access_8080.log mylog;   
声明log   log位置          log格式;


实际应用: shell+定时任务+nginx信号管理,完成日志按日期存储
分析思路: 
凌晨00:00:01,把昨天的日志重命名,放在相应的目录下
再USR1信息号控制nginx重新生成新的日志文件





==============================================================================
查看php运行目录命令：
which php
/usr/bin/php

查看php-fpm进程数：
ps aux | grep -c php-fpm

查看运行内存
/usr/bin/php  -i|grep mem

重启php-fpm
/etc/init.d/php-fpm restart

在phpinfo()输出内容可以看到php相关配置。
Loaded Configuration File /etc/php.ini

==============================

首先要找到php-fpm.conf配置文件，查看pid的配置路径(不是安装路径)，然后把下面对应的地方改掉才能正常执行。

[root@DO-SG-H1 ~]# ps aux | grep php-fpm   
root     11799  0.0  0.0 103248   880 pts/0    S+   13:51   0:00 grep --color php-fpm
root     11973  0.0  0.0 417748   964 ?        Ss   Jun01   0:20 php-fpm: master process (/etc/php-fpm.conf)

cat /etc/php-fpm.conf
看到
pid = /var/run/php-fpm/php-fpm.pid

php-fpm 启动：
/usr/local/php/sbin/php-fpm
php-fpm 关闭：
kill -INT `cat /var/run/php-fpm/php-fpm.pid`
php-fpm 重启：
kill -USR2 `cat /var/run/php-fpm/php-fpm.pid`

查看php-fpm进程数：
ps aux | grep -c php-fpm

=============================

[root@DO-SG-H1 ~]# find / -name 'php-fpm' -type d
/var/log/php-fpm
/var/run/php-fpm

用这个find命令查找出来的路径是不对的

 which php
/usr/bin/php
