4.24 血崩,继续被逼着要论文
php安装扩展通用办法
找到执行目录phpize --with-php-config=这个路径是php-config的路径
./configure
make && make install
Installing shared extensions:     /usr/lib64/php/modules/

或者
phpize  
./configure  
make  
make install
安装成功后会得到类似下面的提示
Installing shared extensions:     /usr/local/lib/php/extensions/no-debug-non-zts-20090626/
在此目录下你会找到xxxxxxxxx.so
在php.ini中加入
extension=/usr/local/lib/php/extensions/no-debug-non-zts-20090626/xxxxxxxx.so  

[root@localhost memcache-2.2.7]# /usr/bin/phpize --with-php-config=/usr/bin/php-config
Configuring for:
PHP Api Version:         20100412
Zend Module Api No:      20100525
Zend Extension Api No:   220100525
得到
Installing shared extensions:     /usr/lib64/php/modules/

================================================================================
memcache 启动的时候 -m64 -p 11211 -vvv -f 2 (-d 后台运行) -f 2是将增长因子设为2  改变每次chunk的大小！！！
用slab allocator机制来管理内存..
把内存分成数个slab仓库..每个仓库分成不同尺寸的块,需要存储内容的时候判断内容的大小,为其选取合理的仓库
比如100byte的数据要存，会选择122的,但是如果122大小的仓库已经满了,这时候不会寻找更大的去存,而是去把旧数据踢掉.
LRU删除机制
============================================================================================
mongodb 和redis 
分布式的时候 数据是一致的
但是多态memcache 不一样,如果memcache集群中某一台gg了..这个时候就有了一致性哈希的问题！！！！！！！！

如果使用memcache集群使用将key转成数字 对其求余(比较类似mysql对多个服务器进行分表的算法key算法)把数据存入不同的服务器
但是某个一个服务器gg了 ,这时候还要get的数据在gg的服务器中的时候这时候就会出现混乱
我们就想到了如果有8个服务器一起工作,gg了一台只有7个了 这时候在取余就出现了混乱,我们的解决办法是对7和8都取余得到的一个数正好能得到正确的值，7*8=56最小公倍数
56~56+7之间求余还在正确的服务器上

在数学上,服务器,从N->N-1台后

(N*(N-1))~~~~(N*(N-1)+N-1) 之间的膜没变

每N*(N-1)只有N个key没变 命中率变成了 N/[N*(N-1)] = 1/(N-1)

命中率下降的很严重

取模算法很不适合做集群使用

对于一致性哈希算法 他的命中率 恰恰相反,不命中1/(N-1)
